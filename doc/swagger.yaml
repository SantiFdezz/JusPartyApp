openapi: "3.0.0"
info:
  version: 1.0.0
  title: JustPartyAPI
  description: Esta api sirve para controlar las peticiones a la BBDD de JustParty.
servers:
  - url: http://localhost:8000
tags:
  - name: User
    description: User actions 
  - name: Events
    description: Event info
  - name: UserPreferences
    description: User preferences
paths:
## LOGUEO Y DESLOGUEO DE USUARIO
  /user/session:
    post:
      tags:
        - User
      summary: Logs user into the system
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'
      security:
        - bearerAuth: []
      responses:
        201:
          $ref: '#/components/responses/LoginOk'
        400:
          $ref: '#/components/responses/ClientError'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - User
      summary: Logs out current logged in user session
      parameters:
        - name: SessionToken
          schema:
            type: string
          in: header
          required: true
          description: The sessionToken returned by the login request
      security:
        - bearerAuth: []
      responses:
        200:
          $ref: '#/components/responses/Ok'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'

## CREACION Y DATOS DE USUARIO. 
  /user:
    post:
        tags:
          - User
        summary: Register a new user
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterBody'
        responses:
          201:
            $ref: '#/components/responses/Created'
          400:
            $ref: '#/components/responses/ClientError'
          409:
            $ref: '#/components/responses/Conflict'
          500:
            $ref: '#/components/responses/ServerError'
    get:
      tags:
        - User
      summary: Get user profile
      parameters:
        - name: SessionToken
          schema:
            type: string
          in: header
          required: true
          description: The sessionToken returned by the login request
      security:
        - bearerAuth: []
      responses:
        200:
          description: User profile received.
          content:
            application/json:    
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/Unauthorized' 
        500:
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - User
      summary: Delete user account and all events  associated with user's id
      parameters:
        - name: SessionToken
          schema:
            type: string
          in: header
          required: true
          description: The sessionToken returned by the login request
      security:
        - bearerAuth: []
      responses:
        200:
          $ref: '#/components/responses/Ok'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'
    put:
      tags:
      - User
      summary: Update user's data
      security:
      - bearerAuth: []
      parameters:
        - name: SessionToken
          schema:
            type: string
          in: header
          required: true
          description: The sessionToken returned by the login request
      requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterBody'
      responses:
        200:
          $ref: '#/components/responses/Ok'
        400:
          $ref: '#/components/responses/ClientError'
        409:
          $ref: '#/components/responses/Conflict'
        500:
          $ref: '#/components/responses/ServerError'

  /user/manager:
    put:
      tags:
        - User
      summary: Update user's manager status
      security:
      - bearerAuth: []
      parameters:
        - name: SessionToken
          schema:
            type: string
          in: header
          required: true
          description: The sessionToken returned by the login request
      responses:
        200:
          $ref: '#/components/responses/Ok'
        400:
          $ref: '#/components/responses/ClientError'
        409:
          $ref: '#/components/responses/Conflict'
        500:
          $ref: '#/components/responses/ServerError'
        401:
          $ref: '#/components/responses/Unauthorized'

## EVENTOS ASISTIDOS Y GUSTADOS POR EL USUARIO
  /user/assistevents:
    get:
      tags:
        - User
      summary: Get all event the user's assist
      description: Returns a list of all events
      parameters:
        - name: SessionToken
          schema:
            type: string
          in: header
          required: true
          description: The sessionToken returned by the login request
      security:
        - bearerAuth: []
      responses:
        200:
          description: A list of events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssistEvents'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'
  
  /user/assistevent/{id}:
    post:
      tags:
        - User
      summary: Add a event to user event's assistance
      description: Post a event ticket to user event's assistance
      security:
        - bearerAuth: []
      parameters:
          - name: id
            in: path
            required: true
            description: Event code
            schema:
              type: integer
              example: 345
          - name: SessionToken
            schema:
              type: string
            in: header
            required: true
            description: The sessionToken returned by the login request
      responses:
        201:
          $ref: '#/components/responses/Created'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - User
      summary: Delete a event assistance
      description: Delete a event from user event's assistance table
      parameters:
          - name: id
            in: path
            required: true
            description: Event code
            schema:
              type: integer
              example: 345
          - name: SessionToken
            schema:
              type: string
            in: header
            required: true
            description: The sessionToken returned by the login request
      security:
        - bearerAuth: []
      responses:
        200:
          $ref: '#/components/responses/Ok'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'
  /user/likedevents:
    get:
      tags:
        - User
      summary: Get all user's liked event's 
      description: Returns a list of all events liked
      security:
        - bearerAuth: []
      parameters:
        - name: SessionToken
          schema:
            type: string
          in: header
          required: true
          description: The sessionToken returned by the login request
      responses:
        200:
          description: A list of events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'

  /user/likedevent/{id}:
    post:
      tags:
        - User
      summary: Add a liked event to user liked events
      description: Returns a list of user's liked events
      security:
        - bearerAuth: []
      parameters:
          - name: id
            in: path
            required: true
            description: Event code
            schema:
              type: integer
              example: 345
          - name: SessionToken
            schema:
              type: string
            in: header
            required: true
            description: The sessionToken returned by the login request
      responses:
        201:
          $ref: '#/components/responses/Created'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - User
      summary: Delete a event liked
      description: Delete a event from user liked events table
      security:
        - bearerAuth: []
      parameters:
          - name: id
            in: path
            required: true
            description: Event code
            schema:
              type: integer
              example: 345
          - name: SessionToken
            schema:
              type: string
            in: header
            required: true
            description: The sessionToken returned by the login request
      responses:
        200:
          $ref: '#/components/responses/Ok'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'

## EVENTOS
  /events:
    get:
      tags:
        - Events
      summary: Get all events filtered by user's music genre
      security:
        - bearerAuth: []
      description: Returns a list of all events filtered by the user's music genre
      parameters:
        - name: SessionToken
          schema:
            type: string
          in: header
          required: true
          description: The sessionToken returned by the login request
        - name: province
          in: query
          required: false
          description: Parameter to sort by province
          schema:
            type: string
            example: 'A Coruña'
        - name: order_by
          in: query
          required: false
          description: Parameter to order by, options=  'date' or 'price'
          schema:
            type: string
            example: 'date'
        - name: mine
          in: query
          required: false
          description: Parameter to sort by OwnEvents on the OwnEvents Page // Cannot be used with province or order_by
          schema:
            type: boolean
            example: 'false'
      responses:
        200:
          description: A list of events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        404:
          $ref: '#/components/responses/NotFound'
        400:
          $ref: '#/components/responses/ClientError'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Events
      summary: Create a new event
      parameters:
        - name: SessionToken
          schema:
            type: string
          in: header
          required: true
          description: The sessionToken returned by the login request

      security:
        - bearerAuth: []
      description: Creates a new event with the provided information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEvent'
      responses:
        201:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/ClientError'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'
    
  /event/{id}:
    get:
      tags:
        - Events
      summary: Get an event by ID
      security:
        - bearerAuth: []
      description: Returns an event with the provided ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the event to get
          schema:
            type: integer
        - name: SessionToken
          schema:
            type: string
          in: header
          required: true
          description: The sessionToken returned by the login request
      responses:
        200:
          description: An event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Events
      summary: Delete an event
      security:
        - bearerAuth: []
      description: Deletes an event with the provided ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the event to delete
          schema:
            type: integer
        - name: SessionToken
          schema:
            type: string
          in: header
          required: true
          description: The sessionToken returned by the login request
      responses:
        200:
          $ref: '#/components/responses/Ok'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'
    put:
      tags:
        - Events
      summary: Edit an event
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the event to delete
          schema:
            type: integer
        - name: SessionToken
          schema:
            type: string
          in: header
          required: true
          description: The sessionToken returned by the login request
      security:
        - bearerAuth: []
      description: Edit an event with the provided information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        200:
          $ref: '#/components/responses/Ok'
        400:
          $ref: '#/components/responses/ClientError'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'

## GUSTOS DE USUARIO
    
  /userPreferences:
    get:
      tags:
        - UserPreferences
      summary: Get all music genres and liked to user
      parameters:
        - name: SessionToken
          schema:
            type: string
          in: header
          required: true
          description: The sessionToken returned by the login request
      security:
        - bearerAuth: []
      responses:
        200:
          description: A list of music genres
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MusicGenres'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'
    put:
      tags:
        - UserPreferences
      summary: Set user's music genre preferences
      security:
        - bearerAuth: []
      parameters:
        - name: SessionToken
          schema:
            type: string
          in: header
          required: true
          description: The sessionToken returned by the login request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
              example: [1, 2, 3]
      responses:
        200:
          $ref: '#/components/responses/Ok'
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'


components:
  responses:
  # Response codes
    ClientError:
      description: Something went wrong (Client Error)
      content:
        application/json:    
          schema:
            example:
              response:  400 Client Error
    ServerError:
      description: Something went wrong (Server Error)
      content:
        application/json:    
          schema:
            example:
              response: 500  Server Error
    Created:
      description: Created Succesfully
      content:
        application/json:
          schema:
            example:
              response: 201 Created
    NotFound:
      description: Not found at server.
      content:
        application/json:    
          schema:
            example:
              response: 404 Not Found
    Unauthorized:
      description: Unauthorized
      content:
        application/json:    
          schema:
            example:
              response: 401 Unauthorized
    Conflict:
      description: Conflict on the server.
      content:
        application/json:
          schema:
            example:
              response: 409 (Conflict)Already exists
    Ok:
      description: Ok
      content:
        application/json:
          schema:
            example:
              response: ok
    LoginOk:
      description: Ok
      content:
        application/json:
          schema:
            example:
              response: ok 
              SessionToken: token
  schemas:
  # Respuestas y body de las peticiones
    LoginBody:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    ManagerBody:
      type: object
      properties:
        manager:
          type: boolean
          description:  manager status of the user
    MusicGenre:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        image:
          type: string
        selected:
          type: boolean
    MusicGenres:
      type: array
      items:
        $ref: '#/components/schemas/MusicGenre'
    RegisterBody:
      type: object
      required:
            - username
            - email
            - province
            - password
            - birthdate
      properties:
        username:
          type: string
          description: Full name of the user
        email:
          type: string
        province:
          type: string
          description: The user's home province
          example: "A Coruña"
        password:
          type: string
        birthdate:
          type: string
          format: date
          example: "2001-03-24"
    User:
      type: object
      properties:
        username:
          type: string
          example: "Pepe"
        email:
          type: string
          example: "pepe@gmail.com"
        province:
          type: string
          example: "A Coruña"
        birthdate:
          type: string
          format: date
          example: "24-03-2001"
        manager:
          type: boolean
          default: false
    CreateEvent:
      type: object
      properties:
        title: 
          type: string
        street: 
          type: string
        province: 
          type: string
        music_genre: 
          type: string
        price: 
          type: number
          example: 15.00
        secretkey:
          type: string
          example: "ROSA"
        link:
          type: string
          format: url
          example: "https://www.ticketmaster.es"
        date: 
          type: string
          description: The date
          example: "24-03-2001"
        time: 
          type: string
          default: "00:00"
        image: 
          type: string
          format: binary
          example: "https://www.google.com/images/branding/logo272x92dp.png"
        description: 
          type: string
    Event:
      type: object
      properties:
        id:
          type: integer
          example: 1
        manager:
          type: string
          example: "Grupo X"
        title: 
          type: string
          example: "Concierto de Rosalía"
        street: 
          type: string
          example: "C/ de la Rosa, 12"
        province: 
          type: string
          example: "A Coruña"
        music_genre: 
          type: string
          example: "Pop"
        price: 
          type: number
          example: 15.00
        secretkey:
          type: string
          example: "ROSA"
        link:
          type: string
          format: url
          example: "https://www.ticketmaster.es"
        date: 
          type: string
          example: "24-03-2001"
        time: 
          type: string
          default: "00:00"
        image: 
          type: string
          format: binary
          example: "https://www.google.com/images/branding/logo272x92dp.png"
        description: 
          type: string
          example: "Descripcion"
        userLiked:
          type: boolean
          default: false
        userAssist:
          type: boolean
          default: false
        assistants:
          type: integer
          default: 0
    Events:
      type: array
      items:
        $ref: '#/components/schemas/Event'
    Preferences:
      type: object
      properties:
        title: 
          type: string
        image: 
          type: string
          format: binary
    AssistEvent:
      type: object
      properties:
        title: 
          type: string
        street: 
          type: string
        price: 
          type: number
          default: 0
        assistants:
          type: integer
          default: 0
        date: 
          type: string
          example: "24-03-2001 00:00"
        secretkey:
          type: string
          default: "PATATA"
        userLiked:
          type: boolean
          default: false
    AssistEvents:
      type: array
      items:
        $ref: '#/components/schemas/AssistEvent'